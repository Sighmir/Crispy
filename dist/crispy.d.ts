import { MarkovGenerateOptions, MarkovResult } from "markov-strings";
export interface IJumpinMessage {
    [key: string]: string;
    handle: string;
    color: string;
    userId: string;
    message: string;
    timestamp: string;
    id: string;
}
export interface ICrispyOptions {
    [key: string]: any;
    headless?: boolean;
    prefix?: string;
    cooldown?: number;
    stateSize?: number;
    minLength?: number;
    minWords?: number;
    minScore?: number;
    maxTries?: number;
    prng?: () => number;
    filter?: (result: MarkovResult) => boolean;
}
export declare type CrispyCommand = (args: string[], data: IJumpinMessage) => void;
export declare class Crispy {
    user: any;
    options: ICrispyOptions;
    private _db;
    private _api;
    private _url;
    private _token;
    private _room;
    private _commands;
    private _browser;
    private _page;
    private _cooldown;
    private _globalCorpus;
    private _userCorpus;
    private _events;
    private _io;
    constructor(token: string, options?: ICrispyOptions);
    readonly room: string;
    readonly io: SocketIOClient.Socket;
    getEventPrefix(eventName: string): string | null;
    connect(): Promise<unknown>;
    join(room: string, user?: object): SocketIOClient.Socket;
    getIgnoreList(roomName: string): SocketIOClient.Socket;
    checkYoutube(notify?: boolean): SocketIOClient.Socket;
    handleChange(handle: string): SocketIOClient.Socket;
    isStillJoined(room: string): SocketIOClient.Socket;
    message(room: string, message: string): SocketIOClient.Socket;
    command(room: string, command: string, value?: string): SocketIOClient.Socket;
    on(event: string, handler: (data?: any) => void): SocketIOClient.Emitter;
    emit(event: string, data?: any): void;
    getCurrentUser(): any;
    getUserProfile(userId: string): any;
    getUnreadMessages(userId: string): any;
    checkCanBroadcast(room: string): any;
    getRoom(room: string): any;
    getRoomEmojis(room: string): any;
    getRoomPlaylist(room: string): any;
    searchYoutube(query: string): any;
    getTurnServer(): any;
    getJanusToken(): any;
    getJanusEndpoints(): any;
    addUniqueMessage(message: string, user?: string): boolean;
    hasMessage(message: string): boolean;
    addMessage(message: string, user?: string): void;
    getMessages(user?: string): any;
    removeMessage(message: string, user?: string): any;
    hasUser(user: string): boolean;
    getUsers(): any;
    removeUser(user: string): any;
    isAdmin(username: string): any;
    setAdmins(usernames: string[]): any;
    addAdmin(username: string): any;
    removeAdmin(username: string): any;
    checkAdmin(handle: string): Promise<unknown>;
    isCommand(message: string): boolean;
    hasCommand(command: string): boolean;
    addCommand(command: string, handler: CrispyCommand): void;
    removeCommand(command: string): void;
    generateMessage(user?: string, options?: MarkovGenerateOptions): any;
    cleanCooldown(): void;
    markovFilter(result: MarkovResult): boolean;
    private _prng;
    private _initCorpus;
    private _buildCorpus;
    private _getBrowser;
    private _getPage;
    private _getPageContent;
}
//# sourceMappingURL=crispy.d.ts.map